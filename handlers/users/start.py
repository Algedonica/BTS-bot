from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
import math
import random
from datetime import datetime
from data.config import user_collection, staff_collection, settings_collection, pmessages_collection
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from loader import dp,bot
from states import ProjectManage,SupportManage, SetupBTSstates
from aiogram.dispatcher import FSMContext
from utils.misc import issupport, parse_city, isadmin, support_role_check, xstr, photoparser, parse_message_by_tag_name
from aiogram.types import InputMediaPhoto
from keyboards.default import defaultmenu,operatorshowuser
from keyboards.inline import usersupportchoiceinline, ticket_callback, add_operator_callback, show_support_pages, edit_something_admin, show_cities_pages

@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    if staff_collection.find({"staffrole":"owner"}).count()<1:
        html_text="\n".join(
            [
                '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ BTS!</b>',
                '',
                '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –µ–≥–æ –≤–≤–µ—Å—Ç–∏'
            ]
        )
        setupsys= InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(
                text='–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å!',
                callback_data='initialize_bts_setup'
            )]
        ]) 
        await message.answer(text=html_text,parse_mode='HTML',reply_markup=setupsys)
        await SetupBTSstates.getadmincode.set()

    else:
        if issupport(message.from_user.id) == True:
            html_text="\n".join(
                [
                    'üëá –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏! üëá'
                ]
            )
            supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                [InlineKeyboardButton(
                    text='üìÑ –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã',
                    callback_data='to_tickets'
                )],
                [InlineKeyboardButton(
                    text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                    callback_data='to_settings'
                )]
            ]) 
            if isadmin(message.from_user.id)== True:
                supportmenubase.add(InlineKeyboardButton(
                text='üíé –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å',
                callback_data='to_admin_menu'
            ))
            if support_role_check(message.from_user.id)== "PLUS":
                supportmenubase.add(InlineKeyboardButton(
                    text='üóÑ –û—Ç—á–µ—Ç—ã',
                    callback_data='to_csv_tables'
                ))
            await message.answer_photo(photo=photoparser("operatormainmenu"), caption=html_text,parse_mode='HTML',reply_markup=supportmenubase )     
            # await message.answer(text=html_text,parse_mode='HTML',reply_markup=supportmenubase ) 
            await SupportManage.menu.set()  
        else:
            if user_collection.count_documents({"user_id": message.from_user.id}) == 0 and message.from_user.is_bot==False:
                    
                photoo = settings_collection.find_one({"settings":"mainsettings"})
                photoo_add= photoo["photos_profile"]
                pdasasd = photoo_add[random.randint(0, 14)]

                deeplink = "none"
                deeplink = message.get_args()
                user_collection.insert_one(
                {"user_id": message.from_user.id,
                "first_name": xstr(message.from_user.first_name),
                "last_name": xstr(message.from_user.last_name),
                "username": xstr(message.from_user.username),
                "callmeas":"none",
                "citytag":"none",
                "city":"none",
                "came_from": deeplink,
                "when_came": datetime.now(),
                "user_photo":pdasasd
                })
                html_text="\n".join(
                    [
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã</b>',
                        ' ',
                        '<i>–ù–∞ —Å–≤—è–∑–∏ üíé¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª.</i>',
                        '<i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥.</i>'
                    ]
                )
                inlinebutt = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                    [InlineKeyboardButton(
                        text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                        callback_data='start_meeting_user'
                    )],
                ]) 
                await bot.send_message(chat_id= message.from_user.id, text=html_text,parse_mode='HTML', reply_markup=inlinebutt)
                await ProjectManage.startmeeting.set()
#################################################User Meet#############################################33                    
@dp.callback_query_handler(text='start_meeting_user', state=ProjectManage.startmeeting)
async def start_meeting_user_func(call:types.CallbackQuery):
    html_text="\n".join(
        [
            '<b>–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</b>',
            ' ',
            '–ò–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
        ]
    )
    await ProjectManage.getnameuser.set()
    await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=None)


@dp.callback_query_handler(text="add_city_user_another", state=ProjectManage.getcityuser)
async def addglblcity_init_func(call: types.CallbackQuery):
    html_text="\n".join(
        [
            '<i>üåá –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:</i>'
        ]
    )
    await ProjectManage.addglblcity.set()
    await call.message.edit_caption(caption=html_text, parse_mode='HTML', reply_markup=None ) 

@dp.message_handler(state=ProjectManage.addglblcity)
async def addglbl_func(message: types.Message):
    citycode="GLBL"
    city = message.text

    user_collection.find_and_modify(
        query={"user_id":message.from_user.id},
        update={"$set":{"city":city, "citytag":citycode}}
    )

   
    html_text="\n".join(
        [
            '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
            '',
            '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
            '',
            'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
            'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            '',
            '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
            '',
        ]
    )
    await ProjectManage.menu.set()
    await message.answer_photo(photo=photoparser('usermainmenu'),caption=html_text, parse_mode='HTML', reply_markup= defaultmenu ) 


@dp.callback_query_handler(show_cities_pages.filter(command='pickcityuser'), state=ProjectManage.getcityuser)
async def pickcityuser_func(call: types.CallbackQuery, callback_data:dict):
    citycode=callback_data.get("page")
    city = parse_city(citycode)


    user_collection.find_and_modify(
        query={"user_id":call.from_user.id},
        update={"$set":{"city":city, "citytag":citycode}}
    )



    html_text="\n".join(
        [
            '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
            '',
            '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
            '',
            'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
            'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            '',
            '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
            '',
            parse_message_by_tag_name(citycode)
        ]
    )
    # await state.reset_state()
    await ProjectManage.menu.set()
    await call.message.delete()
    await call.message.answer_photo(photo=photoparser('usermainmenu'), caption=html_text ,reply_markup=defaultmenu)






########################################################–í—Å–µ —á—Ç–æ –Ω–∏–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–Ω–∏–∑—É########################################################








@dp.message_handler(state=[ProjectManage.getnameuser, ProjectManage.getcityuser])
async def askcityuser_func(message: types.Message):
    user_collection.find_and_modify(
        query={"user_id":message.from_user.id},
        update={"$set":{"callmeas":message.text}}
    )
    
    page = 1
    prevpage = page - 1
    nextpage = page + 1
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    x=settings_collection.find_one({"settings":"mainsettings"})
    cities_obj=x["current_cities"]
    cities_on_page = cities_obj[((page-1)*5):(5*page)]

    for y in cities_on_page:
        if y['code']!="GLBL":
            inlinekeys.add(InlineKeyboardButton(text=y['city'], callback_data=show_cities_pages.new("pickcityuser",page=y['code'])))


    
    
    if prevpage < 1:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("usershowcity",page=1)
        )
    else:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("usershowcity",page=prevpage)
        )

    if  math.ceil(len(cities_obj)/5)==page:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("usershowcity",page=page)
        )      
    else:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("usershowcity",page=nextpage)
        )
    html_text="\n".join(
        [
            '<i><b>'+message.text+'</b>, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üôå</i>',
            '<i>ü§ñ –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞—Ç–∏–Ω–≥¬ª.</i>',
            '<i>üì° –Ø –∂–∏–≤—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –∞ –≤—ã?</i>',
            '<i>üíé –ù–∞—à–∏ –æ—Ñ–∏—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏. –ï—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏—Å—å –≤ –≤–∞—à–µ–º, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î—Ä—É–≥–æ–π¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.</i>',
        ]
    )      
    inlinekeys.add(prevtoadd,nexttoadd)
    inlinekeys.add(InlineKeyboardButton(text='–î—Ä—É–≥–æ–π',callback_data='add_city_user_another'))
    await ProjectManage.getcityuser.set()
    await message.answer_photo(photo=photoparser('useraskcity') ,caption=html_text, parse_mode='HTML', reply_markup=inlinekeys)
























@dp.message_handler(state=ProjectManage.menu)
async def menu_hand(message: types.Message, state: FSMContext):  
    if issupport(message.from_user.id) == True:
        html_text="\n".join(
            [
                'üëá –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏! üëá'
            ]
        )
        supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(
                text='üìÑ –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã',
                callback_data='to_tickets'
            )],
            [InlineKeyboardButton(
                text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                callback_data='to_settings'
            )]
        ]) 
        if isadmin(message.from_user.id)== True:
            supportmenubase.add(InlineKeyboardButton(
            text='üíé –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å',
            callback_data='to_admin_menu'
        ))
        if support_role_check(message.from_user.id)== "PLUS":
            supportmenubase.add(InlineKeyboardButton(
                text='üóÑ –û—Ç—á–µ—Ç—ã',
                callback_data='to_csv_tables'
            )) 
        await state.reset_state()
        await SupportManage.menu.set()  
        #await message.answer(text=html_text,parse_mode='HTML',reply_markup=supportmenubase )
        await message.answer_photo(photo=photoparser("operatormainmenu"), caption=html_text,parse_mode='HTML',reply_markup=supportmenubase )    
    else:    
        thisuser=user_collection.find_one({'user_id':message.from_user.id})
        html_text="\n".join(
            [
                '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
                '',
                '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
                '',
                'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
                'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
                'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
                'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
                '',
                '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
                '',
                parse_message_by_tag_name(thisuser['citytag'])
            ]
        )
        await state.reset_state()
        await ProjectManage.menu.set() 
        # await message.answer(text=html_text,parse_mode='HTML',reply_markup=defaultmenu)
        await message.answer_photo(photo=photoparser('usermainmenu'), caption=html_text ,reply_markup=defaultmenu)








@dp.message_handler(content_types=['photo'], state=SupportManage.menu)
async def parsephoto_hand(message: types.Message, state: FSMContext): 
    # photoo = settings_collection.find_one({"settings":"mainsettings"})
    # photoo_add= photoo["photos_profile"]
    # pdasasd = photoo_add[random.randint(0, 14)]
    await message.answer(text=message.photo[0].file_id)
    await bot.send_photo(chat_id=message.from_user.id, photo=message.photo[0].file_id)

@dp.message_handler(content_types=['video_note'], state=SupportManage.menu)
async def parse_video_note_hand(message: types.Message, state: FSMContext): 
    await message.answer(text=message.video_note.file_id)
    await bot.send_video_note(chat_id=message.from_user.id, video_note=message.video_note.file_id)


@dp.message_handler(content_types=['video'], state=SupportManage.menu)
async def parse_video_hand(message: types.Message, state: FSMContext): 
    await message.answer(text=message.video.file_id)
    await bot.send_video(chat_id=message.from_user.id, video=message.video.file_id)













@dp.message_handler(state=SupportManage.menu)
async def support_menu_hand(message: types.Message, state: FSMContext):  
    if issupport(message.from_user.id) == True:
        html_text="\n".join(
            [
                'üëá –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏! üëá'
            ]
        )
        supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(
                text='üìÑ –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã',
                callback_data='to_tickets'
            )],
            [InlineKeyboardButton(
                text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
                callback_data='to_settings'
            )]
        ]) 
        if isadmin(message.from_user.id)== True:
            supportmenubase.add(InlineKeyboardButton(
            text='üíé –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å',
            callback_data='to_admin_menu'
        ))
        if support_role_check(message.from_user.id)== "PLUS":
            supportmenubase.add(InlineKeyboardButton(
                text='üóÑ –û—Ç—á–µ—Ç—ã',
                callback_data='to_csv_tables'
            )) 
        await state.reset_state()
        await SupportManage.menu.set()     
        # await message.answer(text=html_text,parse_mode='HTML',reply_markup=supportmenubase )
        await message.answer_photo(photo=photoparser("operatormainmenu"), caption=html_text,parse_mode='HTML',reply_markup=supportmenubase )   
    else:    
        thisuser=user_collection.find_one({'user_id':message.from_user.id})
        html_text="\n".join(
            [
                '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
                '',
                '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
                '',
                'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
                'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
                'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
                'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
                '',
                '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
                '',
                parse_message_by_tag_name(thisuser['citytag'])
            ]
        )
        await state.reset_state()
        await ProjectManage.menu.set() 
        # await message.answer(text=html_text,parse_mode='HTML',reply_markup=defaultmenu) 
        await message.answer_photo(photo=photoparser('usermainmenu'), caption=html_text ,reply_markup=defaultmenu)   
@dp.message_handler(state=SetupBTSstates.getadmincode)
async def blockbts(message: types.Message):
    html_text="\n".join(
            [
                '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ BTS!</b>',
                '',
                '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –µ–≥–æ –≤–≤–µ—Å—Ç–∏'
            ]
    )
    setupsys= InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å!',
            callback_data='initialize_bts_setup'
        )]
    ]) 
    await message.answer(text=html_text,parse_mode='HTML',reply_markup=setupsys)

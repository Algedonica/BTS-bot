import secrets
import math
from datetime import datetime
from aiogram import types
from loader import dp, bot
from data.config import user_collection, ticket_collection, staff_collection, settings_collection, states_collection, pmessages_collection, channelid
from states import ProjectManage,SupportManage
from aiogram.types import CallbackQuery,ReplyKeyboardRemove, InputFile
from aiogram.utils.callback_data import CallbackData
from utils.misc.logging import logging
from utils.misc import rate_limit
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import InputMediaPhoto
from utils.misc import isadmin,support_role_check, xstr, photoparser, parse_message_by_tag_name, getCryptoData, parse_video_by_tag_name, send_to_channel

from keyboards.inline import usersupportchoiceinline, ticket_callback, add_operator_callback, show_support_pages, edit_something_admin, show_cities_pages, knowledge_list_call
from keyboards.default import userendsupport,defaultmenu, operatorcontrol,operatorshowuser

from PIL import Image, ImageChops,ImageDraw, ImageFont

scheduler = AsyncIOScheduler()
async def clearnotified():
    staff_collection.find_and_modify(
        query={"staffrole":"support", "notified":"notified"},
        update={"$set":{"notified":"none"}}
    )

            
scheduler.add_job(clearnotified, 'interval', seconds=180)

import sys,os
pathname = os.path.dirname(sys.argv[0]) 
if pathname!='':
    pathname=pathname+'/'
@dp.message_handler(state=ProjectManage.menu, text='üíµ –ö—É—Ä—Å BTC/ETH/SST')
async def initialize_costs(message: types.Message):
    html_text="\n".join(
        [
            '<a href="t.me/cryptoconsbot?start=exchange">üíé –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ—Ç –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</a>'
        ]
    )


    img = Image.open(pathname+r"courses/courses.png")
    idraw = ImageDraw.Draw(img)

    usd_headline = ImageFont.truetype(pathname+r'courses/Jura-Bold.ttf', size=60)
    rub_headline = ImageFont.truetype(pathname+r'courses/Jura-Light.ttf', size=50)
    change24_headline = ImageFont.truetype(pathname+r'courses/Jura-Light.ttf', size=50)

    unicode_font = ImageFont.truetype(pathname+r"courses/arial.ttf", size=50)

    # SST
    text=getCryptoData('simba-storage-token')
    usd=str("{:,.2f}".format(text[0]))
    rub=str("{:,.2f}".format(text[1]))
    if text[2]>0:
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((124,775), '‚ñ≤', font=unicode_font, fill='#666666')
    else: 
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((124,775), '‚ñº', font=unicode_font, fill='#666666')
    
    idraw.text((182,632), usd, font=usd_headline, fill='#B2904B')
    idraw.text((182,710), rub, font=rub_headline, fill='#666666')
    idraw.text((182,775), change24, font=change24_headline, fill='#666666')

    
    # ------------------------------------

    # BTC
    text=getCryptoData('bitcoin')
    usd=str("{:,.2f}".format(text[0]))
    rub=str("{:,.2f}".format(text[1]))
    if text[2]>0:
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((581,775), '‚ñ≤', font=unicode_font, fill='#666666')
    else: 
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((581,775), '‚ñº', font=unicode_font, fill='#666666')
    
    idraw.text((639,632), usd, font=usd_headline, fill='#FF8A00')
    idraw.text((639,710), rub, font=rub_headline, fill='#666666')
    idraw.text((639,775), change24, font=change24_headline, fill='#666666')
    # -------------------------------------

    # ETH
    text=getCryptoData('ethereum')
    usd=str("{:,.2f}".format(text[0]))
    rub=str("{:,.2f}".format(text[1]))
    if text[2]>0:
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((1038,775), '‚ñ≤', font=unicode_font, fill='#666666')
    else: 
        change24=str("{:,.2f}".format(text[2]))+'%'
        idraw.text((1038,775), '‚ñº', font=unicode_font, fill='#666666')
    
    idraw.text((1096,632), usd, font=usd_headline, fill='#62688F')
    idraw.text((1096,710), rub, font=rub_headline, fill='#666666')
    idraw.text((1096,775), change24, font=change24_headline, fill='#666666')
    # ------------------------------------

    datenow = datetime.now().strftime("%d.%m.%Y / %I:%M%p")
    idraw.text((948,1020), datenow, font=change24_headline, fill='#A1DACC')


    img.save(pathname+r'courses/simba.png')


    await bot.send_photo(chat_id=message.from_user.id,caption=html_text,parse_mode='HTML', photo=InputFile(pathname+r'courses/simba.png',filename='final-simba.png'))

@dp.message_handler(state=ProjectManage.menu, text='üíé –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º ¬´–ö–ö¬ª')
async def initialize_partners(message: types.Message):
    html_text="\n".join(
        [
            'Coming soon'
        ]
    )
    await bot.send_photo(chat_id=message.from_user.id, caption=html_text, parse_mode='HTML', photo='AgACAgIAAxkBAAITLmB4f7tNKQKOsT5LHH8dp8SquTddAAIPszEbl7fIS6KP_Op5051cAAFtAAGfLgADAQADAgADbQADdxMDAAEfBA')


@dp.message_handler(state=ProjectManage.menu, text='üí∞ 100% –≥–æ–¥–æ–≤—ã—Ö ‚Äî —Ñ–æ–Ω–¥ SCHUTZ')
async def schutz_show_func(message: types.Message):
    html_text="\n".join(
        [
            '–£–∂–µ —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ –º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –ì–ª–∞–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –∫—É–ø–∏—Ç—å –ø–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ, –ø—Ä–æ–¥–∞—Ç—å –ø–æ –≤—ã—Å–æ–∫–æ–π. –ù–æ –Ω–µ —É –∫–∞–∂–¥–æ–≥–æ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏ –Ω–µ –∫–∞–∂–¥—ã–π —Ö–æ—á–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–Ω–∞–Ω–∏–π. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç SCHUTZ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–∂–∏–º–∞–π "–ø–æ–¥—Ä–æ–±–Ω–µ–µ".'
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–í–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä —Å –õ–µ—Ä–æ–π',
            url='https://www.youtube.com/watch?v=JCuGKrDcJkE'
            ),
        InlineKeyboardButton(
            text='–£–∑–Ω–∞—Ç—å –æ —Ñ–æ–Ω–¥–µ',
            url='invest80.ru'
            )    
        ],
    ])
    inlinemenu.add(InlineKeyboardButton(
            text='–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥',
            url='https://my.schutz.capital/signup?referral=606a97c8ea9d8b8d2dba75b5'
            ))
    await bot.send_photo(chat_id=message.from_user.id, caption=html_text, parse_mode='HTML', photo='AgACAgIAAxkBAAITLmB4f7tNKQKOsT5LHH8dp8SquTddAAIPszEbl7fIS6KP_Op5051cAAFtAAGfLgADAQADAgADbQADdxMDAAEfBA')
    # await bot.send_video_note(chat_id=message.from_user.id,video_note='DQACAgIAAxkBAAIS3mB05-7vIAa7ctMvCEiBEkbpmeRLAALbBwAC_bJRSMg0iIUYG_dTHgQ', reply_markup=inlinemenu )
    await bot.send_video_note(chat_id=message.from_user.id,video_note=parse_video_by_tag_name('kk_logo_circle'), reply_markup=inlinemenu )


#---------------------------inline----show----currencies--------



#--------------------------end----show----currencies----------------------





#---------------------------about-----us-------------------------------------

@dp.message_handler(state=ProjectManage.menu, text='üíé –û –Ω–∞—Å / —É—Å–ª—É–≥–∏')
async def aboutususer(message: types.Message):

    html_text="\n".join(
        [
            '<b>üíé ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª ‚Äî –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –≤ —Å—Ñ–µ—Ä–µ  –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –†–æ—Å—Å–∏–∏.</b>',
            '<b>–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä ‚Äî —à–≤–µ–∏ÃÜ—Ü–∞—Ä—Å–∫–∏–π —Ö–æ–ª–¥–∏–Ω–≥ TRES Group GmbH.</b>',
            ' ',
            'üß† –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ –°–ù–ì —Å 2017 –≥–æ–¥–∞. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –±–æ–ª–µ–µ 1000 –æ—Ç–∑—ã–≤–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.',
            ' ',
            '<b>üó£ –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –º–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω—É—é –ø–æ–º–æ—â—å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º:</b>',
            '<i>1. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</i>',
            '<i>2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–µ—Ä—è–Ω–Ω–æ–∏ÃÜ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –¥–æ—Å—Ç—É–ø–æ–≤ –∫ –∫–æ—à–µ–ª—å–∫–∞–º</i>',
            '<i>3. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</i>',
            '<i>4. –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –æ—Ç 101% –≥–æ–¥–æ–≤—ã—Ö</i>',
            '<i>5. –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</i>',
            '<i>6. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ Blockchain</i>',
            '<i>7. –û–±—É—á–µ–Ω–∏–µ —Å ¬´0¬ª –¥–æ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Å –æ–ø—ã—Ç–æ–º –æ—Ç 3-5 –ª–µ—Ç).</i>',
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å',
            callback_data='earn_about_us'
            ),
        InlineKeyboardButton(
            text='–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
            callback_data='consulting_about_us'
            )
        ],
        [InlineKeyboardButton(
            text='–•—Ä–∞–Ω–µ–Ω–∏–µ',
            callback_data='keep_about_us'
            ),
        InlineKeyboardButton(
            text='–û–±—É—á–µ–Ω–∏–µ',
            callback_data='learn_about_us'
            )
        ],
        [InlineKeyboardButton(
            text='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            callback_data='analytics_about_us'
            ),
        InlineKeyboardButton(
            text='–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
            callback_data='yuri_about_us'
            )
        ],
        [InlineKeyboardButton(
            text='Blockchain —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            callback_data='blockchain_about_us'
            ),
        InlineKeyboardButton(
            text='–õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            callback_data='legal_change_about_us'
            )
        ],
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–ê—É–¥–∏—Ç –∫—Ä–∏–ø—Ç–æ-–∫–æ–º–ø–∞–Ω–∏–π',
            callback_data='audit_about_us'
            )    
        ],
    ])

    # await bot.send_video(chat_id=message.from_user.id, video='BAACAgIAAxkBAAITBGB08pMf6qokJrqy-Eaaw36PcfKaAAIkDQACjFapS_Ary3cMrUSvHgQ', reply_markup=inlinemenu, caption=html_text)
    await bot.send_video(chat_id=message.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)





@dp.callback_query_handler(text='earn_about_us', state=[ProjectManage.menu])
async def earn_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–£–∂–µ —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ –º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –ì–ª–∞–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –∫—É–ø–∏—Ç—å –ø–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ, –ø—Ä–æ–¥–∞—Ç—å –ø–æ –≤—ã—Å–æ–∫–æ–π.',
            '–ù–æ –Ω–µ —É –∫–∞–∂–¥–æ–≥–æ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏ –Ω–µ –∫–∞–∂–¥—ã–π —Ö–æ—á–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–Ω–∞–Ω–∏–π. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç SCHUTZ –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–∂–∏–º–∞–π "–ø–æ–¥—Ä–æ–±–Ω–µ–µ".' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)


@dp.callback_query_handler(text='consulting_about_us', state=[ProjectManage.menu])
async def consulting_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ó–∞–¥–∞–≤–∞–π—Ç–µ –∏—Ö –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)

@dp.callback_query_handler(text='keep_about_us', state=[ProjectManage.menu])
async def keep_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äî —Ü–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤ –∏ –µ–≥–æ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –±–µ—Ä–µ–∂–Ω–æ –∏ –≤ –∑–∞—â–∏—Ç–µ –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –ö–æ—à–µ–ª—å–∫–∏ –±—ã–≤–∞—é—Ç –≥–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ, –∫–æ–≥–¥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Ñ–ª–µ—à–∫–µ.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)


@dp.callback_query_handler(text='learn_about_us', state=[ProjectManage.menu])
async def learn_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–æ –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω—É–∂–Ω—ã–º –ª—é–¥—è–º. –ù–∞—à–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –æ–ø—ã—Ç –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–±—É—á–∏—Ç—å –Ω–æ–≤–∏—á–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –¥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)


@dp.callback_query_handler(text='analytics_about_us', state=[ProjectManage.menu])
async def analytics_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–æ—Å—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞, —á—Ç–æ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –≤–µ–¥–µ—Ç –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)

@dp.callback_query_handler(text='yuri_about_us', state=[ProjectManage.menu])
async def yuri_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ —Å –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å —É—Å—Ç–∞–≤–Ω—ã–º –∫–∞–ø–∏—Ç–∞–ª–æ–º –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –≤ —Ç–æ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —ç—Ç–æ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç (–®–≤–µ–π—Ü–∞—Ä–∏—è, –õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω, –û–ê–≠), –º—ã —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞—Å –ø–æ –≤—Å–µ–º—É –ø—É—Ç–∏ –æ—Ç —Ç–æ—á–∫–∏ –ê –¥–æ —Ç–æ—á–∫–∏ –ë.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)

@dp.callback_query_handler(text='blockchain_about_us', state=[ProjectManage.menu])
async def blockchain_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –º—ã –º–æ–∂–µ–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)

@dp.callback_query_handler(text='legal_change_about_us', state=[ProjectManage.menu])
async def legal_change_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–¶–§–ê (—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã) ‚Äî –∑–∞–∫–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–º—É—â–µ—Å—Ç–≤–æ–º. –ê —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –≤–∞–ª—é—Ç–æ–π –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å —Ä—É–±–ª–∏ –Ω–∞ –Ω–µ–µ –ª–µ–≥–∫–æ. –ü–æ–∫–∞ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏. ' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)

@dp.callback_query_handler(text='audit_about_us', state=[ProjectManage.menu])
async def audit_about_us_func(call: CallbackQuery):
    html_text="\n".join(
        [
            '–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –±–æ–∏—Ç–µ—Å—å –∏–º –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É –Ω–∞—Å –∞—É–¥–∏—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–µ–º –≤–µ—Å—å –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —É–∫–∞–∂–µ–º –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—ã—Ä—ã. ' 
        ]
    )

    inlinemenu=InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥',
            callback_data='userbacktomenu'
            ),
        InlineKeyboardButton(
            text='–í–ø–µ—Ä–µ–¥?',
            callback_data='userbacktomenu'
            )    
        ],
    ])
    await call.message.delete()
    await bot.send_video(chat_id=call.from_user.id, video=parse_video_by_tag_name('aboutus_video'), reply_markup=inlinemenu, caption=html_text)





























#---------------------------about-----us-----end-----------------------------


@dp.message_handler(state=ProjectManage.menu, text='üó£ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
async def initialize_ticket(message: types.Message):
    html_text="\n".join(
        [
            '<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>',
            'üíé –ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
            '',
            '‚ùì–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.'
        ]
    )
    backbutton=InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            callback_data='userbacktomenu'
        )]
    ])
    await message.answer(text='_',parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id+1)
    await bot.send_message(chat_id=message.from_user.id,text=html_text,parse_mode='HTML', reply_markup=backbutton)
    await ProjectManage.initializingsup.set()

@dp.message_handler(state=ProjectManage.initializingsup)
async def initializing_support (message: types.Message):

    user=user_collection.find_one({"user_id": message.from_user.id})

    ticketid=user['citytag']+'-'+secrets.token_hex(4)+'-'+"{:03d}".format(secrets.randbelow(999))

    if ticket_collection.count_documents({"ticketid": ticketid}) == 0 and message.from_user.is_bot==False:
        ticket_collection.insert_one(
        {"ticketid": ticketid,
        "date": datetime.now(), #.strftime("%d/%m/%Y %I:%M%p"),
        "isopen": "created",
        "operator": "none",
        "title": message.text,
        "userid":  message.from_user.id,
        "messagedata":"-------started at "+datetime.now().strftime("%d/%m/%Y %I:%M%p")+"--------",
        "messagedata_timed":"----",
        "messagedata_operator":"",
        "citytag":user['citytag']})
    
    html_text="\n".join(
        [
            '<b>–ú–æ–º–µ–Ω—Ç, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ üòä</b>',
            'ID –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è '+ticketid
        ]
    )
    
    await message.answer(text=html_text,parse_mode='HTML',reply_markup=userendsupport)
    await ProjectManage.awaitingsup.set()

    sups = staff_collection.find({"staffrole":"support","notified":"none","city_code":user['citytag']})
    gotgot = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª',
            callback_data='ivegotit'
        )]
    ]) 
    for x in sups:
        await bot.send_photo(chat_id=x['user_id'],caption='–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ',parse_mode='HTML', reply_markup=gotgot, photo=photoparser('new_question'))



@dp.callback_query_handler(text='userbacktomenu', state=[ProjectManage.preparingquest,ProjectManage.initializingsup,ProjectManage.menu])
async def user_come_to_menu(call:types.CallbackQuery):
    thisuser=user_collection.find_one({'user_id':call.from_user.id})
    html_text="\n".join(
        [
            '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
            '',
            '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
            '',
            'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
            'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            '',
            '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
            '',
            parse_message_by_tag_name(thisuser['citytag'])
        ]
    )
    await call.message.delete()
    await bot.send_photo(chat_id=call.from_user.id,photo=photoparser('usermainmenu'),caption=html_text,parse_mode='HTML', reply_markup=defaultmenu)
    await ProjectManage.menu.set()



@dp.callback_query_handler(text='ivegotit', state=[SupportManage.menu, SupportManage.onair])
async def igotiwork(call:CallbackQuery):
    staff_collection.find_one_and_update(
        { "user_id":call.from_user.id, "notified":"none"},
        { "$set": { "notified": "notified" } }
    )
    await call.message.delete()
@dp.message_handler(state=ProjectManage.awaitingsup, text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
async def end_support(message: types.Message):
    thisicket=ticket_collection.find_one({"userid": message.from_user.id, "$or":[{'isopen':'onair'},{'isopen':'onpause'}, {'isopen':'created'}]})
    if thisicket!=None:
        ticket_collection.update({"userid": message.from_user.id, "$or":[{'isopen':'onair'},{'isopen':'onpause'}, {'isopen':'created'}]},{"$set":{"isopen":"closedbyclient"}})
        
        await bot.send_message(chat_id=channelid, text=thisicket['messagedata'])


        if thisicket['operator']!='none':
            html_text2="\n".join(
                [
                    '<b>–ë–æ—Ç –ö—Ä–∏–ø—Ç–æ–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥:</b>',
                    '',
                    '–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å'
                ]
            )
            await bot.send_photo(chat_id=thisicket['operator'],caption=html_text2,parse_mode='HTML', photo=photoparser('clientfinished'))
    thisuser=user_collection.find_one({'user_id':message.from_user.id})
    html_text="\n".join(
        [
            '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
            '',
            '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
            '',
            'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
            'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            '',
            '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
            '',
            parse_message_by_tag_name(thisuser['citytag'])
        ]
    )
    await message.answer_photo(photo=photoparser('usermainmenu'), caption=html_text,parse_mode='HTML',reply_markup=defaultmenu)
    await ProjectManage.menu.set()
@dp.message_handler(state=SupportManage.onair, text='‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å')
async def end_supportbysupport(message: types.Message):
    thisicket=ticket_collection.find_one({"operator": message.from_user.id,"isopen": "onair"}) 
    if thisicket!=None:
        ticket_collection.update({"operator": message.from_user.id, "isopen": "onair"},{"$set":{"isopen":"closedbyoperator"}})
        await bot.send_message(chat_id=channelid, text=thisicket['messagedata'])
        html_text2="\n".join(
            [
                ' ',
            ]
        )
        clientgotomenu= InlineKeyboardMarkup(row_width=1, inline_keyboard=[
            [InlineKeyboardButton(
                text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é',
                callback_data='to_client_menu'
            )]
        ]) 
        await bot.send_photo(chat_id=thisicket['userid'],photo=photoparser('operatorticketfinished') ,caption=html_text2,parse_mode='HTML',reply_markup=ReplyKeyboardRemove())
        await bot.send_message(chat_id=thisicket['userid'],text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',parse_mode='HTML',reply_markup=clientgotomenu)
    html_text="\n".join(
        [
            ' '
        ]
    )
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üìÑ –û–±—Ä–∞—â–µ–Ω–∏—è',
            callback_data='to_tickets'
        )],
        [InlineKeyboardButton(
            text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            callback_data='to_settings'
        )]
    ])

    if isadmin(message.from_user.id)== True:
        supportmenubase.add(InlineKeyboardButton(
            text='üíé –ê–¥–º–∏–Ω–∞–ø–∞–Ω–µ–ª—å',
            callback_data='to_admin_menu'
        ))
    if support_role_check(message.from_user.id)== "PLUS":
        supportmenubase.add(InlineKeyboardButton(
            text='üóÑ –û—Ç—á–µ—Ç—ã',
            callback_data='to_csv_tables'
        ))      
    await message.answer(text='–í—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ - —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!',parse_mode='HTML',reply_markup=ReplyKeyboardRemove())

    await message.answer_photo(photo=photoparser("operatormainmenu"), caption=html_text,parse_mode='HTML',reply_markup=supportmenubase ) 
    await SupportManage.menu.set()   
  
@dp.callback_query_handler(text='to_client_menu', state=ProjectManage.awaitingsup)
async def clientgogotomenucallback(call: CallbackQuery):
    thisuser=user_collection.find_one({'user_id':call.from_user.id})
    html_text="\n".join(
        [
            '<b>üíé –û–û–û ¬´–ö—Ä–∏–ø—Ç–æ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥¬ª</b>',
            '',
            '<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫–∞–∂–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–∏, —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.</b>',
            '',
            'üó£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
            'üí≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'üéì –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            'üõ° –•–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            'üí± –õ–µ–≥–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω',
            '',
            '<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û –Ω–∞—Å / —É—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—Å–µ—Ö —É—Å–ª—É–≥–∞—Ö.</i>',
            '',
            parse_message_by_tag_name(thisuser['citytag'])
        ]
    )
    await call.message.delete()
    await bot.send_photo(chat_id=call.from_user.id,photo=photoparser('usermainmenu'),caption=html_text,parse_mode='HTML', reply_markup=defaultmenu)
    await ProjectManage.menu.set()

@dp.callback_query_handler(text='tonewtickets', state=SupportManage.menu)
async def tonewticketsfunc(call:types.CallbackQuery):
    operator = staff_collection.find_one({"user_id":call.from_user.id})
    newticket=ticket_collection.find({"isopen":"created", "operator":"none", "citytag": {"$in": operator['city_code'][1:]}})
    opentickets = InlineKeyboardMarkup()
    if newticket.count()>0:
        for x in newticket:
            thisuser = user_collection.find_one({"user_id":x['userid']})
            thisbutton = InlineKeyboardButton(text=str(thisuser['callmeas'])+' ‚ùì '+x['title'], callback_data=ticket_callback.new("openticket",ticketid=x['ticketid'], operatorid=call.from_user.id)  )
            opentickets.add(thisbutton)
    opentickets.add(InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—è–º",callback_data='to_tickets'))

    # await call.message.edit_text(text="<b>üìõ –ù–æ–≤—ã–µ: üó£"+str(newticket.count())+"</b>",reply_markup=opentickets)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("waiting"), caption="<b>üìõ –ù–æ–≤—ã–µ: üó£"+str(newticket.count())+"</b>"), reply_markup=opentickets) 

@dp.callback_query_handler(text='tourpaused', state=SupportManage.menu)
async def tourpausedticketsfunc(call:types.CallbackQuery):
    await call.answer(cache_time=0)
    operator = staff_collection.find_one({"user_id":call.from_user.id})
    pausedticket=ticket_collection.find({"isopen":"onpause", "operator":call.from_user.id,"citytag": {"$in": operator['city_code'][1:]}})
    opentickets = InlineKeyboardMarkup()
    if pausedticket.count()>0:
        for x in pausedticket:
            thisuser = user_collection.find_one({"user_id":x['userid']})
            thisbutton = InlineKeyboardButton(text=str(thisuser['callmeas'])+' ‚ùì '+x['title'], callback_data=ticket_callback.new("openticket",ticketid=x['ticketid'], operatorid=call.from_user.id)  )
            opentickets.add(thisbutton)
    opentickets.add(InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—è–º",callback_data='to_tickets'))

    # await call.message.edit_text(text="<b>–ù–∞ –ø–∞—É–∑–µ: üó£"+str(pausedticket.count())+"</b>",reply_markup=opentickets)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("waiting"), caption="<b>–ù–∞ –ø–∞—É–∑–µ: üó£"+str(pausedticket.count())+"</b>"), reply_markup=opentickets) 


@dp.callback_query_handler(text='to_tickets', state=SupportManage.menu)
async def to_tickets_func(call:types.CallbackQuery):
    await call.answer(cache_time=0)
    inlinekeyb=InlineKeyboardMarkup(row_width=1)
    operator = staff_collection.find_one({"user_id":call.from_user.id})
    created=ticket_collection.count_documents({'isopen':'created', 'operator':'none', "citytag": {"$in": operator['city_code'][1:]}})
    paused=ticket_collection.count_documents({'isopen':'onpause', 'operator':call.from_user.id, "citytag": {"$in":operator['city_code'][1:]}}) 
    updatebutton=InlineKeyboardButton(
        text='–û–±–Ω–æ–≤–∏—Ç—å',
        callback_data="to_tickets"
    )
    inlinekeyb.add(updatebutton)
    if created>0:
        createdbutton=InlineKeyboardButton(
            text='–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è',
            callback_data="tonewtickets"
        )
        inlinekeyb.add(createdbutton)
    if paused>0:
        pausedbutton=InlineKeyboardButton(
            text='–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–º–∏',
            callback_data="tourpaused"
        )
        inlinekeyb.add(pausedbutton)
    html_text="\n".join(
        [
            '<b>üìõ –ù–æ–≤—ã–µ: üó£'+ str(created)+'</b>',
            '–û—Ç–∫—Ä—ã—Ç—ã—Ö: üó£'+str(paused)

        ]
    )
    
    inlinekeyb.add(InlineKeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",callback_data='supportbacktomenu'))
    if created == 0 and paused == 0:
        # await bot.send_photo(chat_id=call.from_user.id, photo=photoparser('silent') )
        await call.message.edit_media(media=InputMediaPhoto(media=photoparser("silent"), caption=html_text), reply_markup=inlinekeyb) 
    else:
        # await bot.send_photo(chat_id=call.from_user.id, photo=photoparser('waiting'))
        await call.message.edit_media(media=InputMediaPhoto(media=photoparser("waiting"), caption=html_text), reply_markup=inlinekeyb) 
    # await call.message.edit_text(text=html_text, reply_markup=inlinekeyb)
         

@dp.callback_query_handler(text='supportbacktomenu', state=SupportManage.menu)
async def supportbacktomenufunc(call:types.CallbackQuery):
    html_text="\n".join(
        [
            ' '
        ]
    )
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üìÑ –û–±—Ä–∞—â–µ–Ω–∏—è',
            callback_data='to_tickets'
        )],
        [InlineKeyboardButton(
            text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            callback_data='to_settings'
        )]
    ])
    if isadmin(call.from_user.id)== True:
        supportmenubase.add(InlineKeyboardButton(
            text='üíé –ê–¥–º–∏–Ω–∞–ø–∞–Ω–µ–ª—å',
            callback_data='to_admin_menu'
        ))
    if support_role_check(call.from_user.id)== "PLUS":
        supportmenubase.add(InlineKeyboardButton(
            text='üóÑ –û—Ç—á–µ—Ç—ã',
            callback_data='to_csv_tables'
        )) 
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("operatormainmenu"), caption=html_text), reply_markup=supportmenubase) 

############################################admin_menu###########################################

@dp.callback_query_handler(text='to_admin_menu', state=SupportManage.menu)
async def adminmenustart(call: types.CallbackQuery):
    html_text="\n".join(
        [
            '<b>üîê –î–æ—Å—Ç—É–ø:</b>',
            '–≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.',
            '<b>‚öúÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>',
            '<i>¬∑ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</i>',
            '<i>¬∑ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥</i>',
            '<i>¬∑ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã </i>'
        ]
    )
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üó£ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã',
            callback_data='edit_support'
        )],
        [InlineKeyboardButton(
            text='üåÜ –ì–æ—Ä–æ–¥–∞',
            callback_data=show_cities_pages.new("showcities",page=1)
        )],
        [InlineKeyboardButton(
            text='‚Åâ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
            callback_data=knowledge_list_call.new("show_faq",param1="main", param2="none")
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            callback_data='supportbacktomenu'
        )],
    ])

    # await call.message.edit_text(text=html_text, reply_markup=supportmenubase)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("adminpanel"), caption=html_text), reply_markup=supportmenubase) 



###########################################Admin menu - cities manage################################################################
@dp.callback_query_handler(show_cities_pages.filter(command='showcities'), state=SupportManage.menu)
async def show_cities_func(call: types.CallbackQuery, callback_data:dict):
    page = callback_data.get("page")
    page = int(page)
    prevpage = page - 1
    nextpage = page + 1
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    x=settings_collection.find_one({"settings":"mainsettings"})
    cities_obj=x["current_cities"]
    cities_on_page = cities_obj[((page-1)*5):(5*page)]

    for y in cities_on_page:
        inlinekeys.add(InlineKeyboardButton(text=y['city']+' - '+y['code'], callback_data=show_cities_pages.new("askfordeletecity",page=y['code'])))


    
    
    if prevpage < 1:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("showcities",page=1)
        )
    else:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("showcities",page=prevpage)
        )

    if  math.ceil(len(cities_obj)/5)==page:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("showcities",page=page)
        )      
    else:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("showcities",page=nextpage)
        )  
    inlinekeys.add(prevtoadd,nexttoadd)
    inlinekeys.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫',callback_data='add_city_admin'))
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é',callback_data='to_admin_menu'))
    # await call.message.edit_text(text='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>', reply_markup=inlinekeys)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("citieslist"), caption='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>'), reply_markup=inlinekeys) 

@dp.callback_query_handler(show_cities_pages.filter(command='askfordeletecity'), state=SupportManage.menu)
async def ask_for_delete_city_func(call: types.CallbackQuery, callback_data:dict):
    
    html_text="\n".join(
        [
            ' ',
        ]
    )
    inlinekeys = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å',
            callback_data=show_support_pages.new('deletecity',page=callback_data.get("page"))
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å',
            callback_data=show_support_pages.new("showcities",page=1)
        )],
    ])
    # await call.message.edit_text(text=html_text,parse_mode='HTML', reply_markup=inlinekeys)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("deletetagask"), caption=html_text), reply_markup=inlinekeys) 


@dp.callback_query_handler(show_cities_pages.filter(command='deletecity'), state=SupportManage.menu)
async def deleting_city_func(call: types.CallbackQuery, callback_data:dict):
    if callback_data.get("page")!= "GLBL" and callback_data.get("page")!= "OTHER":
        staff_collection.find_and_modify( 
            query={}, 
            update={ "$pull": { 'city_code': callback_data.get("page") }}
            )
        settings_collection.find_and_modify( 
            query={"settings":"mainsettings"}, 
            update={ "$pull": { 'current_cities':{'code': callback_data.get("page")} }}
            )
        user_collection.find_and_modify( 
            query={}, 
            update={ "citytag": "GLBL"}
            )
    
    page = 1
    prevpage = page - 1
    nextpage = page + 1
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    x=settings_collection.find_one({"settings":"mainsettings"})
    cities_obj=x["current_cities"]
    cities_on_page = cities_obj[((page-1)*5):(5*page)]

    for y in cities_on_page:
        inlinekeys.add(InlineKeyboardButton(text=y['city']+' - '+y['code'], callback_data=show_cities_pages.new("askfordeletecity",page=y['code'])))


    
    
    if prevpage < 1:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("showcities",page=1)
        )
    else:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_cities_pages.new("showcities",page=prevpage)
        )

    if  math.ceil(len(cities_obj)/5)==page:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("showcities",page=page)
        )      
    else:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_cities_pages.new("showcities",page=nextpage)
        )  
    inlinekeys.add(prevtoadd,nexttoadd)
    inlinekeys.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫',callback_data='add_city_admin'))
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é',callback_data='to_admin_menu'))
    # await call.message.edit_text(text='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>', reply_markup=inlinekeys)
    await call.message.edit_media(media=InputMediaPhoto(media=photoparser("citieslist"), caption='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>'), reply_markup=inlinekeys) 


@dp.callback_query_handler(text='add_city_admin', state=SupportManage.menu)
async def add_city_admin_init(call: types.CallbackQuery):
    html_text="\n".join(
        [
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ —Ç–µ–≥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:',
            ' ',
            '<b>–ì–æ—Ä–æ–¥/—Ç–µ–≥</b>',
            '–¢–µ–≥ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏'
        ]
    )
    await SupportManage.addcityinput.set()
    # await call.message.edit_text(text=html_text, reply_markup=None)
    await call.message.edit_media(media=InputMediaPhoto( photoparser('citieslist'),caption=html_text), reply_markup=None)
@dp.message_handler( state=SupportManage.addcityinput)
async def adding_city_admin(message: types.Message):
    thismsg=message.text
    thismsg = thismsg.split('/')
    city = thismsg[0]
    code = thismsg[1].upper()
    x=settings_collection.find_one({"settings":"mainsettings"})
    cities_obj=x["current_cities"]
    cities_list=[]

    for y in cities_obj:
        cities_list.append(y["code"])
    
    if code in cities_list:
        print('–¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø—è—Ç—å')
    else:
        html_text="\n".join(
            [
                '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≥–æ—Ä–æ–¥'
            ]
        )    
        newObject = {"city":city,"code":code}
        settings_collection.find_and_modify( 
            query={"settings":"mainsettings"}, 
            update={ "$push": { 'current_cities': newObject}}
            )
        staff_collection.find_and_modify( 
            query={"$or":[{'staffrole':'admin'},{'staffrole':'owner'}]}, 
            update={ "$push": { 'city_code': code}}
            )
        await SupportManage.menu.set()
        inlinekeys = InlineKeyboardMarkup(row_width=2)
        inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é',callback_data=show_cities_pages.new("showcities",page=1)))
        # await message.answer(text=html_text, reply_markup=inlinekeys)
        await message.answer_photo(photo=photoparser('citieslist'),caption=html_text, reply_markup=inlinekeys)

################################################Admin menu - support manage#########################################################
@dp.callback_query_handler(text='edit_support', state=SupportManage.menu)
async def admin_menu_edit_support(call: types.CallbackQuery):
    html_text="\n".join(
        [
            ' '
        ]
    )
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üó£ –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
            callback_data=show_support_pages.new("showsuppages",page=1)
        )],
        [InlineKeyboardButton(
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å',
            switch_inline_query='add_operator'
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –Ω–∞–∑–∞–¥',
            callback_data='to_admin_menu'
        )],
    ])
    # await call.message.edit_text(text=html_text, reply_markup=supportmenubase)
    await call.message.edit_media(media=InputMediaPhoto(photoparser('operatormanage'), caption=html_text), reply_markup=supportmenubase)







@dp.callback_query_handler(show_support_pages.filter(command='showsuppages'), state=SupportManage.menu)
async def system_operator_check_list_func(call: types.CallbackQuery, callback_data:dict):
    page = callback_data.get("page")
    page = int(page)
    prevpage = page - 1
    nextpage = page + 1

    inlinekeys = InlineKeyboardMarkup(row_width=2)
    x=staff_collection.find({"staffrole":"support"}).skip((page-1)*5).limit(5)

    for i in x:
        inlinekeys.add(InlineKeyboardButton(text=i["callmeas"]+' '+i["first_name"]+' ('+support_role_check(i['user_id'])+')', callback_data=show_support_pages.new("openoperator",page=i['user_id'])))
    
    
    if prevpage < 1:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_support_pages.new("showsuppages",page=1)
        )
    else:
        prevtoadd=InlineKeyboardButton(
            text='‚óÄÔ∏è',
            callback_data=show_support_pages.new("showsuppages",page=prevpage)
        )

    if  math.ceil(x.count()/5)==page:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_support_pages.new("showsuppages",page=page)
        )      
    else:
        nexttoadd=InlineKeyboardButton(
            text='‚ñ∂Ô∏è',
            callback_data=show_support_pages.new("showsuppages",page=nextpage)
        )  
    inlinekeys.add(prevtoadd,nexttoadd)
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é',callback_data='to_admin_menu'))
    # await call.message.edit_text(text='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>', reply_markup=inlinekeys)   
    await call.message.edit_media(media=InputMediaPhoto(photoparser('operatorlist'), caption='–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '+'<b>'+str(page)+'</b>'), reply_markup=inlinekeys)
 


@dp.callback_query_handler(show_support_pages.filter(command='openoperator'), state=SupportManage.menu)
async def system_operator_open_func(call: types.CallbackQuery, callback_data:dict):
    x = staff_collection.find_one({"user_id" : int(callback_data.get("page"))})
    html_text="\n".join(
        [
            'üó£ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: <a href="tg://user?id='+str(x['user_id'])+'">'+x["first_name"]+'</a>',
            '‚úèÔ∏è –ò–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: '+x['callmeas'],
            'üîë –ü—Ä–∞–≤–∞: '+str(support_role_check(x['user_id'])),
            'üåÜ –ì–æ—Ä–æ–¥–∞: '+str(x["city_code"][1:])
        ]
    )
    operatorbuttons = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üó£ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
            callback_data=show_support_pages.new('operator_change_name',page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='üåÜ –¢—ç–≥–∏ –≥–æ—Ä–æ–¥–æ–≤',
            callback_data=show_support_pages.new("changecityoperator",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='üîë –ü—Ä–∞–≤–∞: '+str(support_role_check(x['user_id'])),
            callback_data=show_support_pages.new("changepassoperator",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å',
            callback_data=show_support_pages.new("deleteoperatorinit",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
            callback_data=show_support_pages.new("showsuppages",page=1)
        )]
    ])
    # await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=operatorbuttons)  
    await call.message.edit_media(media=InputMediaPhoto(photoparser('nameroletags'), caption=html_text, parse_mode='HTML'), reply_markup=operatorbuttons)


@dp.callback_query_handler(show_support_pages.filter(command='deleteoperatorinit'), state=SupportManage.menu)
async def delete_operator_init(call: types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=1)
    x = staff_collection.find_one({"user_id" : int(callback_data.get("page"))}) 
    html_text="\n".join(
        [
            ' '
        ]
    )
    operatorbuttons = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å',
            callback_data=show_support_pages.new('deleteoperatoryes',page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å',
            callback_data=show_support_pages.new("openoperator",page=x["user_id"])
        )]
    ])
    # await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=operatorbuttons) 
    await call.message.edit_media(media=InputMediaPhoto(photoparser('deleteoperatorask'), caption=html_text), reply_markup=operatorbuttons)


@dp.callback_query_handler(show_support_pages.filter(command='deleteoperatoryes'), state=SupportManage.menu)
async def delete_operator_done(call: types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=1)
    staff_collection.remove({"user_id" : int(callback_data.get("page"))}) 
    states_collection.remove({"user": int(callback_data.get("page"))})
    html_text="\n".join(
        [
            ' '
        ]
    )
    operatorbuttons = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
            callback_data=show_support_pages.new('showsuppages',page=1)
        )],
    ])
    # await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=operatorbuttons)
    await call.message.edit_media(media=InputMediaPhoto(photoparser('deleteoperatorask'), caption=html_text), reply_markup=operatorbuttons)


@dp.callback_query_handler(show_support_pages.filter(command='changepassoperator'), state=SupportManage.menu)
async def system_change_role(call: types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=1)
    x = staff_collection.find_one({"user_id" : int(callback_data.get("page"))})

    if x["role"] == "1":
        staff_collection.find_and_modify( 
            query={"user_id":x["user_id"]}, 
            update={ "$set": { 'role': "2"} }
            )
    elif x["role"] == "2":
        staff_collection.find_and_modify( 
            query={"user_id":x["user_id"]}, 
            update={ "$set": { 'role': "1"}}
            )        
    x = staff_collection.find_one({"user_id" : int(callback_data.get("page"))})


    
    html_text="\n".join(
        [
            'üó£ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: <a href="tg://user?id='+str(x['user_id'])+'">'+x["first_name"]+'</a>',
            '‚úèÔ∏è –ò–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: '+x['callmeas'],
            'üîë –ü—Ä–∞–≤–∞: '+str(support_role_check(x['user_id'])),
            'üåÜ –ì–æ—Ä–æ–¥–∞: '+str(x["city_code"][1:])
        ]
    )
    operatorbuttons = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üó£ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
            callback_data=show_support_pages.new('operator_change_name',page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='üåÜ –¢—ç–≥–∏ –≥–æ—Ä–æ–¥–æ–≤',
            callback_data=show_support_pages.new("changecityoperator",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='üîë –ü—Ä–∞–≤–∞: '+str(support_role_check(x['user_id'])),
            callback_data=show_support_pages.new("changepassoperator",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å',
            callback_data=show_support_pages.new("deleteoperatorinit",page=x["user_id"])
        )],
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
            callback_data=show_support_pages.new("showsuppages",page=1)
        )]
    ])
    # await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=operatorbuttons) 
    await call.message.edit_media(media=InputMediaPhoto(photoparser('nameroletags'), caption=html_text), reply_markup=operatorbuttons)
















@dp.callback_query_handler(show_support_pages.filter(command='changecityoperator'), state=SupportManage.menu)
async def system_operator_city_change_func(call: types.CallbackQuery, callback_data:dict):
    x = staff_collection.find_one({"user_id" : int(callback_data.get("page"))})
    y = settings_collection.find_one({"settings":"mainsettings"})
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    cities_in_sys=y["current_cities"]
    cities = x["city_code"]
    for i in cities_in_sys:

        galka=""
        deleteoradd="1"
        if i['code'] in cities:
            galka="‚úîÔ∏è"
            deleteoradd="0"
        inlinekeys.add(InlineKeyboardButton(text=galka+i["city"]+' : '+i["code"], callback_data=edit_something_admin.new('ecu',i["code"],deleteoradd,int(callback_data.get("page")) )))
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É',callback_data=show_support_pages.new("openoperator",page=int(callback_data.get("page")))))
    # await call.message.edit_text(text='–ò–∑–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞', parse_mode='HTML', reply_markup=inlinekeys)  
    await call.message.edit_media(media=InputMediaPhoto(photoparser('operatorcitiesaccess'), caption=' '), reply_markup=inlinekeys)

@dp.callback_query_handler(edit_something_admin.filter(command='ecu'), state=SupportManage.menu)
async def system_operator_city_change_and_update_func(call: types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=1)

    if callback_data.get("deleteoradd") == "1":
        
        staff_collection.find_and_modify( 
            query={"user_id":int(callback_data.get("userid"))}, 
            update={ "$push": { 'city_code': callback_data.get("something") }}
            )
    elif callback_data.get("deleteoradd") == "0":
       
        staff_collection.find_and_modify( 
            query={"user_id":int(callback_data.get("userid"))}, 
            update={ "$pull": { 'city_code': callback_data.get("something") }}
            )


    x = staff_collection.find_one({"user_id" : int(callback_data.get("userid"))})
    y = settings_collection.find_one({"settings":"mainsettings"})
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    cities_in_sys=y["current_cities"]
    cities = x["city_code"]
    for i in cities_in_sys:
        galka=""
        deleteoradd="1"
        if i['code'] in cities:
            galka="‚úîÔ∏è"
            deleteoradd="0"
        inlinekeys.add(InlineKeyboardButton(text=galka+i["city"]+' : '+i["code"], callback_data=edit_something_admin.new('ecu',i["code"],deleteoradd,int(callback_data.get("userid")) )))
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É',callback_data=show_support_pages.new("openoperator",page=int(callback_data.get("userid")))))
    # await call.message.edit_text(text='–ò–∑–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞', parse_mode='HTML', reply_markup=inlinekeys)  
    await call.message.edit_media(media=InputMediaPhoto(photoparser('operatorcitiesaccess'), caption=' '), reply_markup=inlinekeys)










@dp.callback_query_handler(show_support_pages.filter(command='operator_change_name'), state=SupportManage.menu)
async def operator_change_name_support(call: types.CallbackQuery,state: FSMContext, callback_data:dict):
    html_text="\n".join(
        [
            ' '
        ]
    )
    await SupportManage.changeoperatorname.set()
    await state.update_data(operatorid=int(callback_data.get("page")))
    # await call.message.edit_text(text=html_text, parse_mode='HTML', reply_markup=None) 
    await call.message.edit_media(media=InputMediaPhoto(photoparser('operatorchangename'), caption=html_text), reply_markup=None)

@dp.message_handler(state=SupportManage.changeoperatorname)
async def operator_write_new_name_support(message: types.Message, state: FSMContext):
    data = await state.get_data()
    operid = data.get("operatorid")
    staff_collection.find_and_modify( 
            query={"user_id":operid}, 
            update={ "$set": { 'callmeas':message.text }}
            )
    await state.reset_state()
    await SupportManage.menu.set()
    inlinekeys = InlineKeyboardMarkup(row_width=2)
    inlinekeys.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É',callback_data=show_support_pages.new("openoperator",page=operid)))
    # await message.answer(text="–ù–æ–≤–æ–µ –∏–º—è '"+message.text+"' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", parse_mode='HTML', reply_markup=inlinekeys)
    await message.answer_photo(photo=photoparser("operatornameupdated"), caption=" ", reply_markup=inlinekeys)
  

@dp.inline_handler(text="add_operator", state=SupportManage.menu)
async def initialize_adding_operator_tosys(query: types.InlineQuery):
    if isadmin(query.from_user.id)==False:
        await query.answer(
            results=[],
            switch_pm_text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞',
            cache_time=0
            # –¢—É—Ç –æ—à–∏–±–∫–∞
        )
        return  
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='–Ø –≤ –¥–µ–ª–µ!',
            callback_data=add_operator_callback.new("addoperatorfactory",operator_role='1')
        )]
    ])
    await query.answer(
        results=[
            types.InlineQueryResultArticle(
                id="1",
                title='–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ)',
                input_message_content=types.InputMessageContent(message_text="–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Å—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ö—Ä–∏–ø—Ç–æ–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å."),
                reply_markup=supportmenubase
            )
        ],
        cache_time=0
    )  


@dp.callback_query_handler(add_operator_callback.filter(command='addoperatorfactory'), state=[ProjectManage.menu, None])
async def providing_adding_operator_tosys(call:types.CallbackQuery, callback_data:dict):
    
    getoperator=staff_collection.find_one({"user_id":call.from_user.id})
    if getoperator==None:
        staff_collection.insert_one(
        {"user_id": call.from_user.id,
        "first_name":xstr(call.from_user.first_name),
        "last_name":xstr(call.from_user.last_name),
        "username": xstr(call.from_user.username),
        "staffrole": "support",
        "notified": "none",
        "city_code":['none'],
        "callmeas":'none',
        "role":callback_data.get("operator_role")})
        html_text="\n".join(
            [
                '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä!',
                ' ',
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–º –≤–∞—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'
            ]
        ) 
        await bot.edit_message_text(inline_message_id=call.inline_message_id,text=html_text, parse_mode='HTML', reply_markup=None)
    else:
        html_text="\n".join(
            [
                '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'
            ]
        ) 
        await bot.edit_message_text(inline_message_id=call.inline_message_id,text=html_text, parse_mode='HTML', reply_markup=None)
    




######################################################talksupport##########################################
@dp.callback_query_handler(ticket_callback.filter(command='openticket'), state=SupportManage.menu)
async def showcard(call:types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=1)
    thisicket=ticket_collection.find_one({"ticketid":callback_data.get("ticketid")})
    thisuser = user_collection.find_one({"user_id":thisicket['userid']})
    html_text="\n".join(
        [
            '<b>ID —Ç–∏–∫–µ—Ç–∞: '+thisicket["ticketid"]+'</b> ',
            '<b>'+thisuser['callmeas']+':</b> '+thisicket['title'],
            '<b>–ì–æ—Ä–æ–¥: </b>'+thisuser['city']
        ]
    )        
    inlinekeyb=InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É üí¨',
            callback_data=ticket_callback.new("jumptoclient",ticketid=thisicket['ticketid'], operatorid=callback_data.get("operatorid"))
        )],
        [
        InlineKeyboardButton(
            text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥',
            callback_data='tonewtickets'
        ),]
    ])
    await call.message.edit_media(media=InputMediaPhoto(media=thisuser['user_photo'], caption=html_text), reply_markup=inlinekeyb)
    # await call.message.edit_text(text=html_text, reply_markup=inlinekeyb)

@dp.callback_query_handler(ticket_callback.filter(command='jumptoclient'), state=SupportManage.menu)
async def jumptothis(call:types.CallbackQuery, callback_data:dict):
    await call.answer(cache_time=10)
    thisicket=ticket_collection.find_one({"ticketid":callback_data.get("ticketid")})
    thisoperator = staff_collection.find_one({"user_id":call.from_user.id})
    thisuser = user_collection.find_one({"user_id":thisicket['userid']})
    html_text="\n".join(
        [
            '–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º'
            ' ',
            '<b>üó£Ô∏è '+thisuser['callmeas']+'</b> ',
            '<b>–û–±—Ä–∞—â–µ–Ω–∏–µ: </b>'+thisicket['title'],
            ' ',
            '–°–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ: ',
            thisicket['messagedata_operator']
        ]
    )
    datamessagehere = "\n".join(
        [
            thisicket["messagedata"],
            thisicket["messagedata_timed"],
            "---------operator joined at "+datetime.now().strftime("%d/%m/%Y %I:%M%p")+"--------------"

        ]
    ) 
    if thisicket["isopen"]=="created":
        print(thisoperator['callmeas'])
        await bot.send_message(chat_id=thisicket['userid'],text='üôã‚Äç‚ôÇÔ∏è <b>'+thisoperator['callmeas']+'</b> –° –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏',parse_mode='HTML')
    await call.message.delete()
    await bot.send_photo(chat_id=call.from_user.id,caption=html_text,parse_mode='HTML', reply_markup=operatorcontrol,photo=photoparser('changed'))
    ticket_collection.find_and_modify(
        query={"ticketid":callback_data.get("ticketid"), "$or":[{'isopen':'created'},{'isopen':'onpause'}]},
        update={"$set":{"isopen":"onair","operator":call.from_user.id, "messagedata_timed":"---", "messagedata": datamessagehere, 'messagedata_operator': ''}}
    )
    await SupportManage.onair.set()

@dp.message_handler(state=SupportManage.onair, text='üó£ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è')
async def changeticket_supportbysupport(message: types.Message):     
    
    ticket_collection.find_and_modify(
        query={"operator": message.from_user.id, "isopen":"onair"},
        update={"$set":{"isopen":"onpause", "messagedata_timed":"----operator paused at "+datetime.now().strftime("%d/%m/%Y %I:%M%p")+"--------------"}}
    )
    html_text="\n".join(
        [
            ' '
        ]
    )
    supportmenubase = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(
            text='üìÑ –û–±—Ä–∞—â–µ–Ω–∏—è',
            callback_data='to_tickets'
        )],
        [InlineKeyboardButton(
            text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            callback_data='to_settings'
        )]
    ])
    if isadmin(message.from_user.id)== True:
        supportmenubase.add(InlineKeyboardButton(
            text='üíé –ê–¥–º–∏–Ω–∞–ø–∞–Ω–µ–ª—å',
            callback_data='to_admin_menu'
        ))
    if support_role_check(message.from_user.id)== "PLUS":
        supportmenubase.add(InlineKeyboardButton(
            text='üóÑ –û—Ç—á–µ—Ç—ã',
            callback_data='to_csv_tables'
        )) 
    # await message.answer(text='–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–∞—É–∑—É - –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∂–¥–∞—Ç—å!',parse_mode='HTML',reply_markup=ReplyKeyboardRemove())
    await message.answer_photo(caption='–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É - –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∂–¥–∞—Ç—å!',parse_mode='HTML',reply_markup=ReplyKeyboardRemove(), photo=photoparser('paused') )
    await message.answer_photo(photo=photoparser('operatormainmenu'), caption=html_text,parse_mode='HTML',reply_markup=supportmenubase ) 
    await SupportManage.menu.set()

##################################
##################################
###################################–í–°–ï –ß–¢–û –ù–ò–ñ–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –í –ö–û–ù–¶–ï –î–û–ö–£–ú–ï–ù–¢–ê########################################################
@dp.message_handler(state=SupportManage.onair)
async def currenttalk(message: types.Message):
    thisoperator =  staff_collection.find_one({"user_id":message.from_user.id})
    html_text="\n".join(
        [
            '<b>üë®‚Äçüíª '+thisoperator["callmeas"]+':</b>',
            message.text
        ]
    ) 
    thisicket=ticket_collection.find_one({"operator":message.from_user.id, "isopen":"onair"})
    await bot.send_message(chat_id=thisicket['userid'],text=html_text,parse_mode='HTML')
    datamessagehere = "\n".join(
        [
            thisicket["messagedata"],
            html_text,
            ' ',
            'at '+datetime.now().strftime("%d/%m/%Y %I:%M%p")
        ]
    )
    ticket_collection.find_and_modify(
        query={"ticketid":thisicket["ticketid"]},
        update={"$set":{"messagedata":datamessagehere}}
    )
@dp.message_handler(state=ProjectManage.awaitingsup)
async def usercurrenttalk(message: types.Message, state: FSMContext):
    thisicket=ticket_collection.find_one({"userid":message.from_user.id, "$or":[{'isopen':'onair'},{'isopen':'onpause'},{'isopen':'created'}]})
    thisuser = user_collection.find_one({"user_id":message.from_user.id})
    if thisicket["isopen"]=="onair":
        html_text="\n".join(
            [
                '<b>üó£Ô∏è '+thisuser["callmeas"]+':</b>',
                message.text
            ]
        ) 
        await bot.send_message(chat_id=thisicket['operator'],text=html_text,parse_mode='HTML')
        await bot.send_chat_action(chat_id=thisicket['operator'],action="typing")
        datamessagehere = "\n".join(
            [
                thisicket["messagedata"],
                html_text,
                ' ',
                'at '+datetime.now().strftime("%d/%m/%Y %I:%M%p")
            ]
        )
        
        ticket_collection.find_and_modify(
            query={"ticketid":thisicket["ticketid"]},
            update={"$set":{"messagedata":datamessagehere}}
        )
    elif thisicket["isopen"]=="onpause":
        html_text="\n".join(
            [
                '<b>üó£Ô∏è '+thisuser["callmeas"]+':</b>',
                message.text
            ]
        )
        datamessagehere = "\n".join(
            [
                thisicket["messagedata_timed"],
                html_text,
                ' ',
                'at '+datetime.now().strftime("%d/%m/%Y %I:%M%p")
            ]
        )
        operatormessage = "\n".join(
            [
                thisicket["messagedata_operator"],
                message.text
            ]
        )
        ticket_collection.find_and_modify(
            query={"ticketid":thisicket["ticketid"]},
            update={"$set":{"messagedata_timed":datamessagehere, 'messagedata_operator':operatormessage}}
        )  
    elif thisicket["isopen"]=="created":
        html_text="\n".join(
            [
                '<b>üó£Ô∏è '+thisuser["callmeas"]+':</b>',
                message.text
            ]
        )
        datamessagehere = "\n".join(
            [
                thisicket["messagedata_timed"],
                html_text,
                'at '+datetime.now().strftime("%d/%m/%Y %I:%M%p")
            ]
        )
        operatormessage = "\n".join(
            [
                thisicket["messagedata_operator"],
                message.text
            ]
        )
        ticket_collection.find_and_modify(
            query={"ticketid":thisicket["ticketid"]},
            update={"$set":{"messagedata_timed":datamessagehere, "messagedata_operator":operatormessage}}
        )     
@dp.message_handler(state=ProjectManage.preparingquest)
async def usercantresolve(message: types.Message):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è –≤—ã—à–µ',parse_mode='HTML',reply_markup=userendsupport)

